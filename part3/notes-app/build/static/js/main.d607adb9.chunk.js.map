{"version":3,"sources":["example/services/notes.js","example/Footer.jsx","example/Note.jsx","example/Notification.jsx","example/App.jsx","phonebook/services/contacts.js","phonebook/ErrorBanner.jsx","phonebook/Filter.jsx","phonebook/PersonForm.jsx","phonebook/Person.jsx","phonebook/Persons.jsx","phonebook/SuccessBanner.jsx","phonebook/PhonebookApp.jsx","index.js"],"names":["baseUrl","noteService","getAll","request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","create","newObject","post","update","put","Footer","style","color","fontStyle","fontSize","Note","note","toggleImportance","label","className","onClick","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMsg","setErrorMsg","useEffect","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","contactsService","createContact","newContactObject","readAllContacts","updateContact","updatedContactObject","deleteContact","delete","ErrorBanner","background","borderStyle","borderRadius","padding","marginBottom","Filter","placeholder","PersonForm","newName","handleNameChange","newNumber","handleNumberChange","Person","name","number","display","marginLeft","Persons","getContacts","contacts","person","SuccessBanner","persons","setPersons","setNewName","setNewNumber","searchStr","setSearchStr","showAllContacts","setShowAllContacts","successMsg","setSuccessMsg","match","updatedContact","prevState","prevIndex","indexOf","updatedPersons","contactObject","some","toLowerCase","window","confirm","returnedContact","includes","eventId","parseInt","parentNode","contact","returnedData","console","log","ReactDOM","render","PhonebookApp","document","getElementById"],"mappings":"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","file":"static/js/main.d607adb9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// const baseUrl = 'https://afternoon-harbor-27708.herokuapp.com/api/notes';\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then( response => response.data.concat(nonExisting) );\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then( response => response.data );\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then( response => response.data );\r\n}\r\n\r\nconst noteService = { getAll, create, update }\r\n\r\nexport default noteService;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: '16px'\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note App Example 2021</em>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\r\n    const label = note.important ? 'mark unimportant' : 'mark important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error-notification'>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\r\nimport noteService from './services/notes.js';\r\n// Components\r\nimport Footer from './Footer.jsx';\r\nimport Note from './Note.jsx';\r\nimport Notification from './Notification.jsx';\r\n\r\n// Main App\r\nconst App = () => {\r\n\r\n    // Stateful Data\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ newNote, setNewNote ] = useState('a new note...');\r\n    const [ showAll, setShowAll ] = useState(true);\r\n    const [ errorMsg, setErrorMsg ] = useState(null);\r\n\r\n\r\n    // Fetch Data from json-server\r\n    useEffect( () => {\r\n        noteService\r\n            .getAll()\r\n            .then( initialNotes => {\r\n                setNotes(initialNotes)\r\n            });\r\n    }, []);\r\n\r\n    // User saves new note\r\n    const addNote = (event) => {\r\n        event.preventDefault();\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then( returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n                }\r\n            );\r\n    }\r\n\r\n    //\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value);\r\n    }\r\n\r\n    // Able to show only important notes\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter( note => note.important)\r\n\r\n\r\n    //\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find( n => n.id === id )\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then( returnedNote => {\r\n                setNotes(notes.map( note => note.id !== id ? note : returnedNote))\r\n            })\r\n            .catch( error => {\r\n                setErrorMsg(\r\n                    `Note '${note.content}' does not exist on the server.`\r\n                )\r\n                setTimeout( () => {\r\n                    setErrorMsg(null)\r\n                }, 5000)\r\n                // setNotes(notes.filter( n => n.id !== id ))\r\n            });\r\n    }\r\n\r\n\r\n    // Items to render\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMsg} />\r\n            <div>\r\n                <button onClick={ () => setShowAll(!showAll) }>\r\n                    Show {showAll ? 'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map( note =>\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        toggleImportance={ () => toggleImportanceOf(note.id) }\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange}/>\r\n                <button type='submit'>Save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst createContact = (newContactObject) => {\r\n    const request = axios.post(baseUrl, newContactObject);\r\n    return request.then( response => response.data );\r\n}\r\n\r\nconst readAllContacts = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then( response => response.data );\r\n}\r\n\r\nconst updateContact = (updatedContactObject) => {\r\n    const request = axios.put(baseUrl + `/${updatedContactObject.id}`, updatedContactObject)\r\n    return request.then ( response => response.data );\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    const request = axios.delete(baseUrl + `/${id}`)\r\n    return request.then( response => response.data );\r\n}\r\n\r\nconst contactsService = { createContact, readAllContacts, updateContact, deleteContact };\r\n\r\nexport default contactsService;\r\n","import React from 'react';\r\n\r\nconst ErrorBanner = ({ message }) => {\r\n\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n        background: 'lightgrey',\r\n        fontSize: '20px',\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n\r\n    return (\r\n        <div style={errorStyle}>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorBanner;\r\n","import React from 'react';\r\n\r\nconst Filter = ({ onChange, value }) => {\r\n    // Filter contacts for `value` on input change\r\n    return (\r\n        <>\r\n            <div>\r\n                <input\r\n                    placeholder='Search Contacts...'\r\n                    onChange={onChange}\r\n                    value={value}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({ onSubmit, newName, handleNameChange, newNumber, handleNumberChange }) => {\r\n    // Add a new contact with name and number when submitted\r\n    return (\r\n        <>\r\n            <h2>Add New Contact</h2>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    <label>Name: </label>\r\n                    <input value={newName} onChange={handleNameChange}/>\r\n                </div>\r\n                <div>\r\n                    <label>Number: </label>\r\n                    <input value={newNumber} onChange={handleNumberChange}/>\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>Add</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Person = ({ id, name, number, onClick }) => {\r\n    return (\r\n        <div key={id} id={id} style={{padding: '5px'}}>\r\n            <p style={{display: 'inline'}}>{name}: #{number}</p>\r\n            <button onClick={onClick} style={{display: 'inline', marginLeft: '10px'}}>Delete</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Person;\r\n","import React from 'react';\r\nimport Person from './Person.jsx';\r\n\r\nconst Persons = ({ getContacts, onClick }) => {\r\n    // Display contact name and number from list of contacts\r\n\r\n    const contacts = getContacts();\r\n\r\n    return (\r\n        <>\r\n            <h2>Contacts</h2>\r\n            { contacts.map( person => person\r\n                ? <Person\r\n                    key={person.id}\r\n                    id={person.id}\r\n                    name={person.name}\r\n                    number={person.number}\r\n                    onClick={onClick}\r\n                  />\r\n                : null)\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Persons;\r\n","import React from 'react';\r\n\r\nconst SuccessBanner = ({ message }) => {\r\n\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    const successStyle = {\r\n        color: 'green',\r\n        background: 'lightgrey',\r\n        fontSize: '20px',\r\n        borderStyle: 'solid',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        marginBottom: '10px'\r\n    }\r\n\r\n    return (\r\n        <div style={successStyle}>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuccessBanner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport contactsService from './services/contacts.js';\r\nimport ErrorBanner from './ErrorBanner.jsx';\r\nimport Filter from './Filter.jsx';\r\nimport PersonForm from './PersonForm.jsx';\r\nimport Persons from './Persons.jsx';\r\nimport SuccessBanner from './SuccessBanner.jsx';\r\n\r\nconst App = () => {\r\n\r\n    // All contacts\r\n    const [ persons, setPersons ] = useState([]);\r\n\r\n    // New contact info\r\n    const [ newName, setNewName ] = useState('');\r\n    const [ newNumber, setNewNumber ] = useState('');\r\n\r\n    // Display of contacts from search filter\r\n    const [ searchStr, setSearchStr ] = useState('');\r\n    const [ showAllContacts, setShowAllContacts ] = useState(true);\r\n\r\n    // Messages\r\n    const [ successMsg, setSuccessMsg ] = useState(null);\r\n    const [ errorMsg, setErrorMsg ] = useState(null);\r\n\r\n\r\n    // Fetch Data from json-server\r\n    useEffect( () => {\r\n        contactsService\r\n            .readAllContacts()\r\n            .then( response => setPersons(response))\r\n        }, []);\r\n\r\n\r\n    // Add contact info from input\r\n    const addContact = (event) => {\r\n        // Don't reload page on submit\r\n        event.preventDefault();\r\n\r\n        const contactObject = {\r\n            name: newName,\r\n            number: newNumber\r\n        }\r\n\r\n        // Checks if entry already exists\r\n        if (persons.some( person => person.name.toLowerCase() === newName.toLowerCase() )) {\r\n            const affirm = window.confirm(\r\n                `\\n'${newName}' is already a contact.\r\n                \\nReplace the previous number with: ${newNumber}?`\r\n            )\r\n            // Update contact number\r\n            if (affirm) {\r\n                updateContact(contactObject);\r\n            }\r\n        } else {\r\n            // Server Communication\r\n            contactsService\r\n                .createContact(contactObject)\r\n                .then( returnedContact => {\r\n                    setPersons(persons.concat(returnedContact))\r\n                    // toast success banner\r\n                    setSuccessMsg(\r\n                        `'${contactObject.name}' successfully added!`\r\n                    );\r\n                    setTimeout( () => {\r\n                        setSuccessMsg(null)\r\n                    }, 5000)\r\n                });\r\n\r\n\r\n        }\r\n\r\n        // Reset input fields\r\n        setNewName('');\r\n        setNewNumber('');\r\n    }\r\n\r\n\r\n    // Update contact number\r\n    const updateContact = ({ name, number }) => {\r\n\r\n        const match = persons.filter( person => person.name === name)[0]\r\n        const id = match.id;\r\n        const updatedContact = {\r\n            name: name,\r\n            number: number,\r\n            id: id\r\n        }\r\n\r\n        // Update on server\r\n        contactsService\r\n            .updateContact(updatedContact)\r\n            .then( response => {\r\n                setPersons( prevState => {\r\n                    const prevIndex = prevState.indexOf(match);\r\n                    let updatedPersons = [...prevState];\r\n                    updatedPersons[prevIndex] = response;\r\n\r\n                    return updatedPersons\r\n                })\r\n\r\n                // Toast success banner\r\n                setSuccessMsg(\r\n                    `'${name}' successfully updated!`\r\n                );\r\n                setTimeout( () => {\r\n                    setSuccessMsg(null)\r\n                }, 5000)\r\n            })\r\n            .catch( error => {\r\n                setErrorMsg(\r\n                    `'${updatedContact.name}' cannot be found.`\r\n                )\r\n                setTimeout( () => {\r\n                    setErrorMsg(null)\r\n                }, 5000)\r\n            });\r\n\r\n        // Reset input fields\r\n        setNewName('');\r\n        setNewNumber('');\r\n    }\r\n\r\n\r\n    // Delete Contact from list\r\n    const deleteContact = (event) => {\r\n        const eventId = parseInt(event.target.parentNode.id);\r\n        const contact = persons.find( person => person.id === eventId );\r\n        const isConfirmed = window.confirm(`Delete contact '${contact.name}' ?`);\r\n\r\n        if (isConfirmed) {\r\n            contactsService\r\n                .deleteContact(eventId)\r\n                .then( returnedData => {\r\n                    setPersons(persons.filter( person => person.id !== eventId ))\r\n                })\r\n                .catch( error => {\r\n                    console.log(error)\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    // Filter list of contacts to show\r\n    const contactsToDisplay = () => {\r\n\r\n        const contactsSet = showAllContacts\r\n            ? persons\r\n            : persons.filter( person =>\r\n                person.name.toLowerCase().includes(\r\n                    searchStr.toLowerCase()\r\n                ) === true\r\n              )\r\n        return contactsSet;\r\n    }\r\n\r\n    // When Name input is changed\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value);\r\n    }\r\n\r\n    // When Number input is changed\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value);\r\n    }\r\n\r\n    // When Search input is changed\r\n    const handleSearchChange = (event) => {\r\n        setShowAllContacts(false);\r\n        setSearchStr(event.target.value);\r\n    }\r\n\r\n\r\n    // Elements to render\r\n    return (\r\n        <>\r\n            <h1>Phonebook</h1>\r\n\r\n            <SuccessBanner message={successMsg} />\r\n            <ErrorBanner message={errorMsg} />\r\n\r\n            <Filter\r\n                onChange={handleSearchChange}\r\n                value={searchStr}\r\n            />\r\n\r\n            <PersonForm\r\n                onSubmit={addContact}\r\n                newName={newName}\r\n                handleNameChange={handleNameChange}\r\n                newNumber={newNumber}\r\n                handleNumberChange={handleNumberChange}\r\n            />\r\n\r\n            <Persons\r\n                getContacts={contactsToDisplay}\r\n                onClick={deleteContact}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles.css'\r\n// App components\r\nimport App0 from './example/App.jsx';\r\n// import ExercisesApp from './exercise/a/ExercisesApp.jsx';\r\nimport PhonebookApp from './phonebook/PhonebookApp.jsx';\r\n// import CountriesApp from './countries/CountriesApp.jsx';\r\n\r\n\r\n// Example\r\nReactDOM.render(\r\n  <>\r\n  <App0 />\r\n  <PhonebookApp />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// Exercise\r\n// ReactDOM.render(\r\n//     <>\r\n//         <CountriesApp />\r\n//         <hr />\r\n//         <App0 />\r\n//         <hr />\r\n//         <ExercisesApp />\r\n//         <hr />\r\n//         <PhonebookApp />\r\n//         <hr />\r\n//     </>,\r\n//     document.getElementById('root')\r\n// );\r\n"],"sourceRoot":""}